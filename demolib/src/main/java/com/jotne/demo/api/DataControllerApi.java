/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.jotne.demo.api;

import com.jotne.demo.ApiCallback;
import com.jotne.demo.ApiClient;
import com.jotne.demo.ApiException;
import com.jotne.demo.ApiResponse;
import com.jotne.demo.Configuration;
import com.jotne.demo.Pair;
import com.jotne.demo.ProgressRequestBody;
import com.jotne.demo.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.jotne.demo.model.BreakdownElementInfoWrapper;
import com.jotne.demo.model.ByteArrayResource;
import com.jotne.demo.model.DataFileInfoWrapper;
import com.jotne.demo.model.DataFileSearchResultInfo;
import com.jotne.demo.model.DataFileSearchResultInfoEx;
import java.io.File;
import com.jotne.demo.model.FileInfo;
import com.jotne.demo.model.StatusOfAction;
import com.jotne.demo.model.StickyNoteInfo;
import com.jotne.demo.model.UsersRolesInfoPackage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataControllerApi {
    private ApiClient apiClient;

    public DataControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFileUsingPOST
     * @param file file (required)
     * @param model model (required)
     * @param node node (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param app  (optional)
     * @param contentType  (optional)
     * @param descr  (optional)
     * @param discipline  (optional)
     * @param editor  (optional)
     * @param isNewIssue  (optional)
     * @param projPhase  (optional)
     * @param resp  (optional)
     * @param rev  (optional)
     * @param revMan  (optional)
     * @param source  (optional)
     * @param status  (optional)
     * @param title  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFileUsingPOSTCall(File file, String model, Long node, String repository, String token, String type, Long actTimestamp, String app, String contentType, String descr, String discipline, String editor, Boolean isNewIssue, String projPhase, String resp, String rev, String revMan, String source, String status, String title, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/{repository}/{model}/{type}/{node}/{token}"
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("act_timestamp", actTimestamp));
        if (app != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("app", app));
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentType", contentType));
        if (descr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("descr", descr));
        if (discipline != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("discipline", discipline));
        if (editor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("editor", editor));
        if (isNewIssue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isNewIssue", isNewIssue));
        if (projPhase != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projPhase", projPhase));
        if (resp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resp", resp));
        if (rev != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rev", rev));
        if (revMan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("revMan", revMan));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (title != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("title", title));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFileUsingPOSTValidateBeforeCall(File file, String model, Long node, String repository, String token, String type, Long actTimestamp, String app, String contentType, String descr, String discipline, String editor, Boolean isNewIssue, String projPhase, String resp, String rev, String revMan, String source, String status, String title, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling addFileUsingPOST(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling addFileUsingPOST(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling addFileUsingPOST(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addFileUsingPOST(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addFileUsingPOST(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addFileUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addFileUsingPOSTCall(file, model, node, repository, token, type, actTimestamp, app, contentType, descr, discipline, editor, isNewIssue, projPhase, resp, rev, revMan, source, status, title, progressListener, progressRequestListener);
        return call;

    }

    /**
     * addFile
     * 
     * @param file file (required)
     * @param model model (required)
     * @param node node (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param app  (optional)
     * @param contentType  (optional)
     * @param descr  (optional)
     * @param discipline  (optional)
     * @param editor  (optional)
     * @param isNewIssue  (optional)
     * @param projPhase  (optional)
     * @param resp  (optional)
     * @param rev  (optional)
     * @param revMan  (optional)
     * @param source  (optional)
     * @param status  (optional)
     * @param title  (optional)
     * @return DataFileInfoWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataFileInfoWrapper addFileUsingPOST(File file, String model, Long node, String repository, String token, String type, Long actTimestamp, String app, String contentType, String descr, String discipline, String editor, Boolean isNewIssue, String projPhase, String resp, String rev, String revMan, String source, String status, String title) throws ApiException {
        ApiResponse<DataFileInfoWrapper> resp1 = addFileUsingPOSTWithHttpInfo(file, model, node, repository, token, type, actTimestamp, app, contentType, descr, discipline, editor, isNewIssue, projPhase, resp, rev, revMan, source, status, title);
        return resp1.getData();
    }

    /**
     * addFile
     * 
     * @param file file (required)
     * @param model model (required)
     * @param node node (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param app  (optional)
     * @param contentType  (optional)
     * @param descr  (optional)
     * @param discipline  (optional)
     * @param editor  (optional)
     * @param isNewIssue  (optional)
     * @param projPhase  (optional)
     * @param resp  (optional)
     * @param rev  (optional)
     * @param revMan  (optional)
     * @param source  (optional)
     * @param status  (optional)
     * @param title  (optional)
     * @return ApiResponse&lt;DataFileInfoWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataFileInfoWrapper> addFileUsingPOSTWithHttpInfo(File file, String model, Long node, String repository, String token, String type, Long actTimestamp, String app, String contentType, String descr, String discipline, String editor, Boolean isNewIssue, String projPhase, String resp, String rev, String revMan, String source, String status, String title) throws ApiException {
        com.squareup.okhttp.Call call = addFileUsingPOSTValidateBeforeCall(file, model, node, repository, token, type, actTimestamp, app, contentType, descr, discipline, editor, isNewIssue, projPhase, resp, rev, revMan, source, status, title, null, null);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addFile (asynchronously)
     * 
     * @param file file (required)
     * @param model model (required)
     * @param node node (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param app  (optional)
     * @param contentType  (optional)
     * @param descr  (optional)
     * @param discipline  (optional)
     * @param editor  (optional)
     * @param isNewIssue  (optional)
     * @param projPhase  (optional)
     * @param resp  (optional)
     * @param rev  (optional)
     * @param revMan  (optional)
     * @param source  (optional)
     * @param status  (optional)
     * @param title  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFileUsingPOSTAsync(File file, String model, Long node, String repository, String token, String type, Long actTimestamp, String app, String contentType, String descr, String discipline, String editor, Boolean isNewIssue, String projPhase, String resp, String rev, String revMan, String source, String status, String title, final ApiCallback<DataFileInfoWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFileUsingPOSTValidateBeforeCall(file, model, node, repository, token, type, actTimestamp, app, contentType, descr, discipline, editor, isNewIssue, projPhase, resp, rev, revMan, source, status, title, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addNoteUsingPOST
     * @param content content (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNoteUsingPOSTCall(String content, Long file, String model, String repository, String token, String type, String ver, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/note/{repository}/{model}/{type}/{file}/{token}"
            .replaceAll("\\{" + "file" + "\\}", apiClient.escapeString(file.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (content != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("content", content));
        if (ver != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ver", ver));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNoteUsingPOSTValidateBeforeCall(String content, Long file, String model, String repository, String token, String type, String ver, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling addNoteUsingPOST(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling addNoteUsingPOST(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling addNoteUsingPOST(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addNoteUsingPOST(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addNoteUsingPOST(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addNoteUsingPOST(Async)");
        }
        
        // verify the required parameter 'ver' is set
        if (ver == null) {
            throw new ApiException("Missing the required parameter 'ver' when calling addNoteUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addNoteUsingPOSTCall(content, file, model, repository, token, type, ver, progressListener, progressRequestListener);
        return call;

    }

    /**
     * addNote
     * 
     * @param content content (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @return StickyNoteInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StickyNoteInfo addNoteUsingPOST(String content, Long file, String model, String repository, String token, String type, String ver) throws ApiException {
        ApiResponse<StickyNoteInfo> resp = addNoteUsingPOSTWithHttpInfo(content, file, model, repository, token, type, ver);
        return resp.getData();
    }

    /**
     * addNote
     * 
     * @param content content (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @return ApiResponse&lt;StickyNoteInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StickyNoteInfo> addNoteUsingPOSTWithHttpInfo(String content, Long file, String model, String repository, String token, String type, String ver) throws ApiException {
        com.squareup.okhttp.Call call = addNoteUsingPOSTValidateBeforeCall(content, file, model, repository, token, type, ver, null, null);
        Type localVarReturnType = new TypeToken<StickyNoteInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addNote (asynchronously)
     * 
     * @param content content (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNoteUsingPOSTAsync(String content, Long file, String model, String repository, String token, String type, String ver, final ApiCallback<StickyNoteInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNoteUsingPOSTValidateBeforeCall(content, file, model, repository, token, type, ver, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StickyNoteInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for advancedSearchDocumentsUsingGET
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param approver approver (optional)
     * @param checkOutUser checkOutUser (optional)
     * @param createAfter createAfter (optional)
     * @param createBefore createBefore (optional)
     * @param createUser createUser (optional)
     * @param dataType dataType (optional)
     * @param descipline descipline (optional)
     * @param descr descr (optional)
     * @param docSource docSource (optional)
     * @param docStatus docStatus (optional)
     * @param docType docType (optional)
     * @param editAfter editAfter (optional)
     * @param editBefore editBefore (optional)
     * @param editUser editUser (optional)
     * @param editor editor (optional)
     * @param extVer extVer (optional)
     * @param limit limit (optional, default to 500)
     * @param nodeID nodeID (optional, default to 0)
     * @param nodeVer nodeVer (optional)
     * @param onlyCheckOut onlyCheckOut (optional, default to false)
     * @param onlyRedFlag onlyRedFlag (optional, default to false)
     * @param onlyStickyNote onlyStickyNote (optional, default to false)
     * @param pPhase pPhase (optional)
     * @param propName propName (optional)
     * @param propVal propVal (optional)
     * @param rManager rManager (optional)
     * @param responsible responsible (optional)
     * @param reviewer reviewer (optional)
     * @param rid rid (optional)
     * @param submtAfter submtAfter (optional)
     * @param submtBefore submtBefore (optional)
     * @param title title (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call advancedSearchDocumentsUsingGETCall(String model, String repository, String token, String type, String approver, String checkOutUser, String createAfter, String createBefore, String createUser, String dataType, String descipline, String descr, String docSource, String docStatus, String docType, String editAfter, String editBefore, String editUser, String editor, String extVer, Long limit, Long nodeID, String nodeVer, Boolean onlyCheckOut, Boolean onlyRedFlag, Boolean onlyStickyNote, String pPhase, List<String> propName, List<String> propVal, String rManager, String responsible, String reviewer, String rid, String submtAfter, String submtBefore, String title, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/a_search/{repository}/{model}/{type}/{token}"
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (approver != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("approver", approver));
        if (checkOutUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("checkOutUser", checkOutUser));
        if (createAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createAfter", createAfter));
        if (createBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createBefore", createBefore));
        if (createUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createUser", createUser));
        if (dataType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataType", dataType));
        if (descipline != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("descipline", descipline));
        if (descr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("descr", descr));
        if (docSource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("docSource", docSource));
        if (docStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("docStatus", docStatus));
        if (docType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("docType", docType));
        if (editAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("editAfter", editAfter));
        if (editBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("editBefore", editBefore));
        if (editUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("editUser", editUser));
        if (editor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("editor", editor));
        if (extVer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extVer", extVer));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (nodeID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodeID", nodeID));
        if (nodeVer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodeVer", nodeVer));
        if (onlyCheckOut != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyCheckOut", onlyCheckOut));
        if (onlyRedFlag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyRedFlag", onlyRedFlag));
        if (onlyStickyNote != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyStickyNote", onlyStickyNote));
        if (pPhase != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pPhase", pPhase));
        if (propName != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propName", propName));
        if (propVal != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propVal", propVal));
        if (rManager != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rManager", rManager));
        if (responsible != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("responsible", responsible));
        if (reviewer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reviewer", reviewer));
        if (rid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rid", rid));
        if (submtAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("submtAfter", submtAfter));
        if (submtBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("submtBefore", submtBefore));
        if (title != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("title", title));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call advancedSearchDocumentsUsingGETValidateBeforeCall(String model, String repository, String token, String type, String approver, String checkOutUser, String createAfter, String createBefore, String createUser, String dataType, String descipline, String descr, String docSource, String docStatus, String docType, String editAfter, String editBefore, String editUser, String editor, String extVer, Long limit, Long nodeID, String nodeVer, Boolean onlyCheckOut, Boolean onlyRedFlag, Boolean onlyStickyNote, String pPhase, List<String> propName, List<String> propVal, String rManager, String responsible, String reviewer, String rid, String submtAfter, String submtBefore, String title, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling advancedSearchDocumentsUsingGET(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling advancedSearchDocumentsUsingGET(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling advancedSearchDocumentsUsingGET(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling advancedSearchDocumentsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = advancedSearchDocumentsUsingGETCall(model, repository, token, type, approver, checkOutUser, createAfter, createBefore, createUser, dataType, descipline, descr, docSource, docStatus, docType, editAfter, editBefore, editUser, editor, extVer, limit, nodeID, nodeVer, onlyCheckOut, onlyRedFlag, onlyStickyNote, pPhase, propName, propVal, rManager, responsible, reviewer, rid, submtAfter, submtBefore, title, progressListener, progressRequestListener);
        return call;

    }

    /**
     * advancedSearchDocuments
     * 
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param approver approver (optional)
     * @param checkOutUser checkOutUser (optional)
     * @param createAfter createAfter (optional)
     * @param createBefore createBefore (optional)
     * @param createUser createUser (optional)
     * @param dataType dataType (optional)
     * @param descipline descipline (optional)
     * @param descr descr (optional)
     * @param docSource docSource (optional)
     * @param docStatus docStatus (optional)
     * @param docType docType (optional)
     * @param editAfter editAfter (optional)
     * @param editBefore editBefore (optional)
     * @param editUser editUser (optional)
     * @param editor editor (optional)
     * @param extVer extVer (optional)
     * @param limit limit (optional, default to 500)
     * @param nodeID nodeID (optional, default to 0)
     * @param nodeVer nodeVer (optional)
     * @param onlyCheckOut onlyCheckOut (optional, default to false)
     * @param onlyRedFlag onlyRedFlag (optional, default to false)
     * @param onlyStickyNote onlyStickyNote (optional, default to false)
     * @param pPhase pPhase (optional)
     * @param propName propName (optional)
     * @param propVal propVal (optional)
     * @param rManager rManager (optional)
     * @param responsible responsible (optional)
     * @param reviewer reviewer (optional)
     * @param rid rid (optional)
     * @param submtAfter submtAfter (optional)
     * @param submtBefore submtBefore (optional)
     * @param title title (optional)
     * @return List&lt;DataFileSearchResultInfoEx&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DataFileSearchResultInfoEx> advancedSearchDocumentsUsingGET(String model, String repository, String token, String type, String approver, String checkOutUser, String createAfter, String createBefore, String createUser, String dataType, String descipline, String descr, String docSource, String docStatus, String docType, String editAfter, String editBefore, String editUser, String editor, String extVer, Long limit, Long nodeID, String nodeVer, Boolean onlyCheckOut, Boolean onlyRedFlag, Boolean onlyStickyNote, String pPhase, List<String> propName, List<String> propVal, String rManager, String responsible, String reviewer, String rid, String submtAfter, String submtBefore, String title) throws ApiException {
        ApiResponse<List<DataFileSearchResultInfoEx>> resp = advancedSearchDocumentsUsingGETWithHttpInfo(model, repository, token, type, approver, checkOutUser, createAfter, createBefore, createUser, dataType, descipline, descr, docSource, docStatus, docType, editAfter, editBefore, editUser, editor, extVer, limit, nodeID, nodeVer, onlyCheckOut, onlyRedFlag, onlyStickyNote, pPhase, propName, propVal, rManager, responsible, reviewer, rid, submtAfter, submtBefore, title);
        return resp.getData();
    }

    /**
     * advancedSearchDocuments
     * 
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param approver approver (optional)
     * @param checkOutUser checkOutUser (optional)
     * @param createAfter createAfter (optional)
     * @param createBefore createBefore (optional)
     * @param createUser createUser (optional)
     * @param dataType dataType (optional)
     * @param descipline descipline (optional)
     * @param descr descr (optional)
     * @param docSource docSource (optional)
     * @param docStatus docStatus (optional)
     * @param docType docType (optional)
     * @param editAfter editAfter (optional)
     * @param editBefore editBefore (optional)
     * @param editUser editUser (optional)
     * @param editor editor (optional)
     * @param extVer extVer (optional)
     * @param limit limit (optional, default to 500)
     * @param nodeID nodeID (optional, default to 0)
     * @param nodeVer nodeVer (optional)
     * @param onlyCheckOut onlyCheckOut (optional, default to false)
     * @param onlyRedFlag onlyRedFlag (optional, default to false)
     * @param onlyStickyNote onlyStickyNote (optional, default to false)
     * @param pPhase pPhase (optional)
     * @param propName propName (optional)
     * @param propVal propVal (optional)
     * @param rManager rManager (optional)
     * @param responsible responsible (optional)
     * @param reviewer reviewer (optional)
     * @param rid rid (optional)
     * @param submtAfter submtAfter (optional)
     * @param submtBefore submtBefore (optional)
     * @param title title (optional)
     * @return ApiResponse&lt;List&lt;DataFileSearchResultInfoEx&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DataFileSearchResultInfoEx>> advancedSearchDocumentsUsingGETWithHttpInfo(String model, String repository, String token, String type, String approver, String checkOutUser, String createAfter, String createBefore, String createUser, String dataType, String descipline, String descr, String docSource, String docStatus, String docType, String editAfter, String editBefore, String editUser, String editor, String extVer, Long limit, Long nodeID, String nodeVer, Boolean onlyCheckOut, Boolean onlyRedFlag, Boolean onlyStickyNote, String pPhase, List<String> propName, List<String> propVal, String rManager, String responsible, String reviewer, String rid, String submtAfter, String submtBefore, String title) throws ApiException {
        com.squareup.okhttp.Call call = advancedSearchDocumentsUsingGETValidateBeforeCall(model, repository, token, type, approver, checkOutUser, createAfter, createBefore, createUser, dataType, descipline, descr, docSource, docStatus, docType, editAfter, editBefore, editUser, editor, extVer, limit, nodeID, nodeVer, onlyCheckOut, onlyRedFlag, onlyStickyNote, pPhase, propName, propVal, rManager, responsible, reviewer, rid, submtAfter, submtBefore, title, null, null);
        Type localVarReturnType = new TypeToken<List<DataFileSearchResultInfoEx>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * advancedSearchDocuments (asynchronously)
     * 
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param approver approver (optional)
     * @param checkOutUser checkOutUser (optional)
     * @param createAfter createAfter (optional)
     * @param createBefore createBefore (optional)
     * @param createUser createUser (optional)
     * @param dataType dataType (optional)
     * @param descipline descipline (optional)
     * @param descr descr (optional)
     * @param docSource docSource (optional)
     * @param docStatus docStatus (optional)
     * @param docType docType (optional)
     * @param editAfter editAfter (optional)
     * @param editBefore editBefore (optional)
     * @param editUser editUser (optional)
     * @param editor editor (optional)
     * @param extVer extVer (optional)
     * @param limit limit (optional, default to 500)
     * @param nodeID nodeID (optional, default to 0)
     * @param nodeVer nodeVer (optional)
     * @param onlyCheckOut onlyCheckOut (optional, default to false)
     * @param onlyRedFlag onlyRedFlag (optional, default to false)
     * @param onlyStickyNote onlyStickyNote (optional, default to false)
     * @param pPhase pPhase (optional)
     * @param propName propName (optional)
     * @param propVal propVal (optional)
     * @param rManager rManager (optional)
     * @param responsible responsible (optional)
     * @param reviewer reviewer (optional)
     * @param rid rid (optional)
     * @param submtAfter submtAfter (optional)
     * @param submtBefore submtBefore (optional)
     * @param title title (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call advancedSearchDocumentsUsingGETAsync(String model, String repository, String token, String type, String approver, String checkOutUser, String createAfter, String createBefore, String createUser, String dataType, String descipline, String descr, String docSource, String docStatus, String docType, String editAfter, String editBefore, String editUser, String editor, String extVer, Long limit, Long nodeID, String nodeVer, Boolean onlyCheckOut, Boolean onlyRedFlag, Boolean onlyStickyNote, String pPhase, List<String> propName, List<String> propVal, String rManager, String responsible, String reviewer, String rid, String submtAfter, String submtBefore, String title, final ApiCallback<List<DataFileSearchResultInfoEx>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = advancedSearchDocumentsUsingGETValidateBeforeCall(model, repository, token, type, approver, checkOutUser, createAfter, createBefore, createUser, dataType, descipline, descr, docSource, docStatus, docType, editAfter, editBefore, editUser, editor, extVer, limit, nodeID, nodeVer, onlyCheckOut, onlyRedFlag, onlyStickyNote, pPhase, propName, propVal, rManager, responsible, reviewer, rid, submtAfter, submtBefore, title, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DataFileSearchResultInfoEx>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkInFileUsingPOST
     * @param file file (required)
     * @param inFile inFile (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param app  (optional)
     * @param contentType  (optional)
     * @param descr  (optional)
     * @param discipline  (optional)
     * @param editor  (optional)
     * @param isNewIssue  (optional)
     * @param projPhase  (optional)
     * @param resp  (optional)
     * @param rev  (optional)
     * @param revMan  (optional)
     * @param source  (optional)
     * @param status  (optional)
     * @param title  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkInFileUsingPOSTCall(File file, Long inFile, String model, String repository, String token, String type, Long actTimestamp, String app, String contentType, String descr, String discipline, String editor, Boolean isNewIssue, String projPhase, String resp, String rev, String revMan, String source, String status, String title, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/file_checkin/{repository}/{model}/{type}/{inFile}/{token}"
            .replaceAll("\\{" + "inFile" + "\\}", apiClient.escapeString(inFile.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("act_timestamp", actTimestamp));
        if (app != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("app", app));
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentType", contentType));
        if (descr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("descr", descr));
        if (discipline != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("discipline", discipline));
        if (editor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("editor", editor));
        if (isNewIssue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isNewIssue", isNewIssue));
        if (projPhase != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projPhase", projPhase));
        if (resp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resp", resp));
        if (rev != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rev", rev));
        if (revMan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("revMan", revMan));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (title != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("title", title));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkInFileUsingPOSTValidateBeforeCall(File file, Long inFile, String model, String repository, String token, String type, Long actTimestamp, String app, String contentType, String descr, String discipline, String editor, Boolean isNewIssue, String projPhase, String resp, String rev, String revMan, String source, String status, String title, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling checkInFileUsingPOST(Async)");
        }
        
        // verify the required parameter 'inFile' is set
        if (inFile == null) {
            throw new ApiException("Missing the required parameter 'inFile' when calling checkInFileUsingPOST(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling checkInFileUsingPOST(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling checkInFileUsingPOST(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling checkInFileUsingPOST(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling checkInFileUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = checkInFileUsingPOSTCall(file, inFile, model, repository, token, type, actTimestamp, app, contentType, descr, discipline, editor, isNewIssue, projPhase, resp, rev, revMan, source, status, title, progressListener, progressRequestListener);
        return call;

    }

    /**
     * checkInFile
     * 
     * @param file file (required)
     * @param inFile inFile (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param app  (optional)
     * @param contentType  (optional)
     * @param descr  (optional)
     * @param discipline  (optional)
     * @param editor  (optional)
     * @param isNewIssue  (optional)
     * @param projPhase  (optional)
     * @param resp  (optional)
     * @param rev  (optional)
     * @param revMan  (optional)
     * @param source  (optional)
     * @param status  (optional)
     * @param title  (optional)
     * @return DataFileInfoWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataFileInfoWrapper checkInFileUsingPOST(File file, Long inFile, String model, String repository, String token, String type, Long actTimestamp, String app, String contentType, String descr, String discipline, String editor, Boolean isNewIssue, String projPhase, String resp, String rev, String revMan, String source, String status, String title) throws ApiException {
        ApiResponse<DataFileInfoWrapper> resp1 = checkInFileUsingPOSTWithHttpInfo(file, inFile, model, repository, token, type, actTimestamp, app, contentType, descr, discipline, editor, isNewIssue, projPhase, resp, rev, revMan, source, status, title);
        return resp1.getData();
    }

    /**
     * checkInFile
     * 
     * @param file file (required)
     * @param inFile inFile (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param app  (optional)
     * @param contentType  (optional)
     * @param descr  (optional)
     * @param discipline  (optional)
     * @param editor  (optional)
     * @param isNewIssue  (optional)
     * @param projPhase  (optional)
     * @param resp  (optional)
     * @param rev  (optional)
     * @param revMan  (optional)
     * @param source  (optional)
     * @param status  (optional)
     * @param title  (optional)
     * @return ApiResponse&lt;DataFileInfoWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataFileInfoWrapper> checkInFileUsingPOSTWithHttpInfo(File file, Long inFile, String model, String repository, String token, String type, Long actTimestamp, String app, String contentType, String descr, String discipline, String editor, Boolean isNewIssue, String projPhase, String resp, String rev, String revMan, String source, String status, String title) throws ApiException {
        com.squareup.okhttp.Call call = checkInFileUsingPOSTValidateBeforeCall(file, inFile, model, repository, token, type, actTimestamp, app, contentType, descr, discipline, editor, isNewIssue, projPhase, resp, rev, revMan, source, status, title, null, null);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * checkInFile (asynchronously)
     * 
     * @param file file (required)
     * @param inFile inFile (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param app  (optional)
     * @param contentType  (optional)
     * @param descr  (optional)
     * @param discipline  (optional)
     * @param editor  (optional)
     * @param isNewIssue  (optional)
     * @param projPhase  (optional)
     * @param resp  (optional)
     * @param rev  (optional)
     * @param revMan  (optional)
     * @param source  (optional)
     * @param status  (optional)
     * @param title  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkInFileUsingPOSTAsync(File file, Long inFile, String model, String repository, String token, String type, Long actTimestamp, String app, String contentType, String descr, String discipline, String editor, Boolean isNewIssue, String projPhase, String resp, String rev, String revMan, String source, String status, String title, final ApiCallback<DataFileInfoWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkInFileUsingPOSTValidateBeforeCall(file, inFile, model, repository, token, type, actTimestamp, app, contentType, descr, discipline, editor, isNewIssue, projPhase, resp, rev, revMan, source, status, title, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkoutFileUsingPUT
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkoutFileUsingPUTCall(Long file, String model, String repository, String token, String type, Long actTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/file_checkout/{repository}/{model}/{type}/{file}/{token}"
            .replaceAll("\\{" + "file" + "\\}", apiClient.escapeString(file.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("act_timestamp", actTimestamp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkoutFileUsingPUTValidateBeforeCall(Long file, String model, String repository, String token, String type, Long actTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling checkoutFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling checkoutFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling checkoutFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling checkoutFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling checkoutFileUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = checkoutFileUsingPUTCall(file, model, repository, token, type, actTimestamp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * checkoutFile
     * 
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @return DataFileInfoWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataFileInfoWrapper checkoutFileUsingPUT(Long file, String model, String repository, String token, String type, Long actTimestamp) throws ApiException {
        ApiResponse<DataFileInfoWrapper> resp = checkoutFileUsingPUTWithHttpInfo(file, model, repository, token, type, actTimestamp);
        return resp.getData();
    }

    /**
     * checkoutFile
     * 
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @return ApiResponse&lt;DataFileInfoWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataFileInfoWrapper> checkoutFileUsingPUTWithHttpInfo(Long file, String model, String repository, String token, String type, Long actTimestamp) throws ApiException {
        com.squareup.okhttp.Call call = checkoutFileUsingPUTValidateBeforeCall(file, model, repository, token, type, actTimestamp, null, null);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * checkoutFile (asynchronously)
     * 
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkoutFileUsingPUTAsync(Long file, String model, String repository, String token, String type, Long actTimestamp, final ApiCallback<DataFileInfoWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkoutFileUsingPUTValidateBeforeCall(file, model, repository, token, type, actTimestamp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for clearRedFlagUsingPUT
     * @param depfile depfile (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clearRedFlagUsingPUTCall(Long depfile, Long file, String model, String repository, String token, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/flag/{repository}/{model}/{type}/{file}/{depfile}/{token}"
            .replaceAll("\\{" + "depfile" + "\\}", apiClient.escapeString(depfile.toString()))
            .replaceAll("\\{" + "file" + "\\}", apiClient.escapeString(file.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clearRedFlagUsingPUTValidateBeforeCall(Long depfile, Long file, String model, String repository, String token, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'depfile' is set
        if (depfile == null) {
            throw new ApiException("Missing the required parameter 'depfile' when calling clearRedFlagUsingPUT(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling clearRedFlagUsingPUT(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling clearRedFlagUsingPUT(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling clearRedFlagUsingPUT(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling clearRedFlagUsingPUT(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling clearRedFlagUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = clearRedFlagUsingPUTCall(depfile, file, model, repository, token, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * clearRedFlag
     * 
     * @param depfile depfile (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @return StatusOfAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusOfAction clearRedFlagUsingPUT(Long depfile, Long file, String model, String repository, String token, String type) throws ApiException {
        ApiResponse<StatusOfAction> resp = clearRedFlagUsingPUTWithHttpInfo(depfile, file, model, repository, token, type);
        return resp.getData();
    }

    /**
     * clearRedFlag
     * 
     * @param depfile depfile (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @return ApiResponse&lt;StatusOfAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusOfAction> clearRedFlagUsingPUTWithHttpInfo(Long depfile, Long file, String model, String repository, String token, String type) throws ApiException {
        com.squareup.okhttp.Call call = clearRedFlagUsingPUTValidateBeforeCall(depfile, file, model, repository, token, type, null, null);
        Type localVarReturnType = new TypeToken<StatusOfAction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * clearRedFlag (asynchronously)
     * 
     * @param depfile depfile (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clearRedFlagUsingPUTAsync(Long depfile, Long file, String model, String repository, String token, String type, final ApiCallback<StatusOfAction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clearRedFlagUsingPUTValidateBeforeCall(depfile, file, model, repository, token, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusOfAction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFileUsingDELETE
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param all all (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFileUsingDELETECall(Long file, String model, String repository, String token, String type, Long actTimestamp, Boolean all, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/{repository}/{model}/{type}/{file}/{token}"
            .replaceAll("\\{" + "file" + "\\}", apiClient.escapeString(file.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("act_timestamp", actTimestamp));
        if (all != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("all", all));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFileUsingDELETEValidateBeforeCall(Long file, String model, String repository, String token, String type, Long actTimestamp, Boolean all, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling deleteFileUsingDELETE(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling deleteFileUsingDELETE(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteFileUsingDELETE(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteFileUsingDELETE(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteFileUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFileUsingDELETECall(file, model, repository, token, type, actTimestamp, all, progressListener, progressRequestListener);
        return call;

    }

    /**
     * deleteFile
     * 
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param all all (optional, default to false)
     * @return BreakdownElementInfoWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BreakdownElementInfoWrapper deleteFileUsingDELETE(Long file, String model, String repository, String token, String type, Long actTimestamp, Boolean all) throws ApiException {
        ApiResponse<BreakdownElementInfoWrapper> resp = deleteFileUsingDELETEWithHttpInfo(file, model, repository, token, type, actTimestamp, all);
        return resp.getData();
    }

    /**
     * deleteFile
     * 
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param all all (optional, default to false)
     * @return ApiResponse&lt;BreakdownElementInfoWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BreakdownElementInfoWrapper> deleteFileUsingDELETEWithHttpInfo(Long file, String model, String repository, String token, String type, Long actTimestamp, Boolean all) throws ApiException {
        com.squareup.okhttp.Call call = deleteFileUsingDELETEValidateBeforeCall(file, model, repository, token, type, actTimestamp, all, null, null);
        Type localVarReturnType = new TypeToken<BreakdownElementInfoWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteFile (asynchronously)
     * 
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param all all (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFileUsingDELETEAsync(Long file, String model, String repository, String token, String type, Long actTimestamp, Boolean all, final ApiCallback<BreakdownElementInfoWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFileUsingDELETEValidateBeforeCall(file, model, repository, token, type, actTimestamp, all, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BreakdownElementInfoWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLinkUsingDELETE
     * @param file1 file1 (required)
     * @param file2 file2 (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLinkUsingDELETECall(Long file1, Long file2, String model, String repository, String token, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/link/{repository}/{model}/{type}/{file1}/{file2}/{token}"
            .replaceAll("\\{" + "file1" + "\\}", apiClient.escapeString(file1.toString()))
            .replaceAll("\\{" + "file2" + "\\}", apiClient.escapeString(file2.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLinkUsingDELETEValidateBeforeCall(Long file1, Long file2, String model, String repository, String token, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file1' is set
        if (file1 == null) {
            throw new ApiException("Missing the required parameter 'file1' when calling deleteLinkUsingDELETE(Async)");
        }
        
        // verify the required parameter 'file2' is set
        if (file2 == null) {
            throw new ApiException("Missing the required parameter 'file2' when calling deleteLinkUsingDELETE(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling deleteLinkUsingDELETE(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteLinkUsingDELETE(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteLinkUsingDELETE(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteLinkUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLinkUsingDELETECall(file1, file2, model, repository, token, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * deleteLink
     * 
     * @param file1 file1 (required)
     * @param file2 file2 (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @return StatusOfAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusOfAction deleteLinkUsingDELETE(Long file1, Long file2, String model, String repository, String token, String type) throws ApiException {
        ApiResponse<StatusOfAction> resp = deleteLinkUsingDELETEWithHttpInfo(file1, file2, model, repository, token, type);
        return resp.getData();
    }

    /**
     * deleteLink
     * 
     * @param file1 file1 (required)
     * @param file2 file2 (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @return ApiResponse&lt;StatusOfAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusOfAction> deleteLinkUsingDELETEWithHttpInfo(Long file1, Long file2, String model, String repository, String token, String type) throws ApiException {
        com.squareup.okhttp.Call call = deleteLinkUsingDELETEValidateBeforeCall(file1, file2, model, repository, token, type, null, null);
        Type localVarReturnType = new TypeToken<StatusOfAction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteLink (asynchronously)
     * 
     * @param file1 file1 (required)
     * @param file2 file2 (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLinkUsingDELETEAsync(Long file1, Long file2, String model, String repository, String token, String type, final ApiCallback<StatusOfAction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLinkUsingDELETEValidateBeforeCall(file1, file2, model, repository, token, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusOfAction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNoteUsingDELETE
     * @param author author (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param time time (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNoteUsingDELETECall(String author, Long file, String model, String repository, Long time, String token, String type, String ver, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/note/{repository}/{model}/{type}/{file}/{token}"
            .replaceAll("\\{" + "file" + "\\}", apiClient.escapeString(file.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (author != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("author", author));
        if (time != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("time", time));
        if (ver != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ver", ver));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNoteUsingDELETEValidateBeforeCall(String author, Long file, String model, String repository, Long time, String token, String type, String ver, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling deleteNoteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling deleteNoteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling deleteNoteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteNoteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling deleteNoteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteNoteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteNoteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'ver' is set
        if (ver == null) {
            throw new ApiException("Missing the required parameter 'ver' when calling deleteNoteUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNoteUsingDELETECall(author, file, model, repository, time, token, type, ver, progressListener, progressRequestListener);
        return call;

    }

    /**
     * deleteNote
     * 
     * @param author author (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param time time (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @return StatusOfAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusOfAction deleteNoteUsingDELETE(String author, Long file, String model, String repository, Long time, String token, String type, String ver) throws ApiException {
        ApiResponse<StatusOfAction> resp = deleteNoteUsingDELETEWithHttpInfo(author, file, model, repository, time, token, type, ver);
        return resp.getData();
    }

    /**
     * deleteNote
     * 
     * @param author author (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param time time (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @return ApiResponse&lt;StatusOfAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusOfAction> deleteNoteUsingDELETEWithHttpInfo(String author, Long file, String model, String repository, Long time, String token, String type, String ver) throws ApiException {
        com.squareup.okhttp.Call call = deleteNoteUsingDELETEValidateBeforeCall(author, file, model, repository, time, token, type, ver, null, null);
        Type localVarReturnType = new TypeToken<StatusOfAction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deleteNote (asynchronously)
     * 
     * @param author author (required)
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param time time (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNoteUsingDELETEAsync(String author, Long file, String model, String repository, Long time, String token, String type, String ver, final ApiCallback<StatusOfAction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNoteUsingDELETEValidateBeforeCall(author, file, model, repository, time, token, type, ver, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusOfAction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileDataUsingGET
     * @param name name (required)
     * @param src src (required)
     * @param token Server connection token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileDataUsingGETCall(String name, String src, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/file/data/{src}/{name}/{token}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "src" + "\\}", apiClient.escapeString(src.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileDataUsingGETValidateBeforeCall(String name, String src, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFileDataUsingGET(Async)");
        }
        
        // verify the required parameter 'src' is set
        if (src == null) {
            throw new ApiException("Missing the required parameter 'src' when calling getFileDataUsingGET(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getFileDataUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getFileDataUsingGETCall(name, src, token, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getFileData
     * 
     * @param name name (required)
     * @param src src (required)
     * @param token Server connection token (required)
     * @return ByteArrayResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ByteArrayResource getFileDataUsingGET(String name, String src, String token) throws ApiException {
        ApiResponse<ByteArrayResource> resp = getFileDataUsingGETWithHttpInfo(name, src, token);
        return resp.getData();
    }

    /**
     * getFileData
     * 
     * @param name name (required)
     * @param src src (required)
     * @param token Server connection token (required)
     * @return ApiResponse&lt;ByteArrayResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ByteArrayResource> getFileDataUsingGETWithHttpInfo(String name, String src, String token) throws ApiException {
        com.squareup.okhttp.Call call = getFileDataUsingGETValidateBeforeCall(name, src, token, null, null);
        Type localVarReturnType = new TypeToken<ByteArrayResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getFileData (asynchronously)
     * 
     * @param name name (required)
     * @param src src (required)
     * @param token Server connection token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileDataUsingGETAsync(String name, String src, String token, final ApiCallback<ByteArrayResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileDataUsingGETValidateBeforeCall(name, src, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ByteArrayResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileVerLinkUsingGET
     * @param model model (required)
     * @param name name (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileVerLinkUsingGETCall(String model, String name, String repository, String token, String type, Long ver, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/file/link/{repository}/{model}/{type}/{token}"
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (ver != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ver", ver));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileVerLinkUsingGETValidateBeforeCall(String model, String name, String repository, String token, String type, Long ver, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling getFileVerLinkUsingGET(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFileVerLinkUsingGET(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getFileVerLinkUsingGET(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getFileVerLinkUsingGET(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getFileVerLinkUsingGET(Async)");
        }
        
        // verify the required parameter 'ver' is set
        if (ver == null) {
            throw new ApiException("Missing the required parameter 'ver' when calling getFileVerLinkUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getFileVerLinkUsingGETCall(model, name, repository, token, type, ver, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getFileVerLink
     * 
     * @param model model (required)
     * @param name name (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @return FileInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileInfo getFileVerLinkUsingGET(String model, String name, String repository, String token, String type, Long ver) throws ApiException {
        ApiResponse<FileInfo> resp = getFileVerLinkUsingGETWithHttpInfo(model, name, repository, token, type, ver);
        return resp.getData();
    }

    /**
     * getFileVerLink
     * 
     * @param model model (required)
     * @param name name (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @return ApiResponse&lt;FileInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileInfo> getFileVerLinkUsingGETWithHttpInfo(String model, String name, String repository, String token, String type, Long ver) throws ApiException {
        com.squareup.okhttp.Call call = getFileVerLinkUsingGETValidateBeforeCall(model, name, repository, token, type, ver, null, null);
        Type localVarReturnType = new TypeToken<FileInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getFileVerLink (asynchronously)
     * 
     * @param model model (required)
     * @param name name (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param ver ver (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileVerLinkUsingGETAsync(String model, String name, String repository, String token, String type, Long ver, final ApiCallback<FileInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileVerLinkUsingGETValidateBeforeCall(model, name, repository, token, type, ver, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectUsersAndRolesUsingGET
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectUsersAndRolesUsingGETCall(String model, String repository, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/info/users/{repository}/{model}/{token}"
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectUsersAndRolesUsingGETValidateBeforeCall(String model, String repository, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling getProjectUsersAndRolesUsingGET(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getProjectUsersAndRolesUsingGET(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getProjectUsersAndRolesUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getProjectUsersAndRolesUsingGETCall(model, repository, token, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getProjectUsersAndRoles
     * 
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @return UsersRolesInfoPackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UsersRolesInfoPackage getProjectUsersAndRolesUsingGET(String model, String repository, String token) throws ApiException {
        ApiResponse<UsersRolesInfoPackage> resp = getProjectUsersAndRolesUsingGETWithHttpInfo(model, repository, token);
        return resp.getData();
    }

    /**
     * getProjectUsersAndRoles
     * 
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @return ApiResponse&lt;UsersRolesInfoPackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UsersRolesInfoPackage> getProjectUsersAndRolesUsingGETWithHttpInfo(String model, String repository, String token) throws ApiException {
        com.squareup.okhttp.Call call = getProjectUsersAndRolesUsingGETValidateBeforeCall(model, repository, token, null, null);
        Type localVarReturnType = new TypeToken<UsersRolesInfoPackage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getProjectUsersAndRoles (asynchronously)
     * 
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectUsersAndRolesUsingGETAsync(String model, String repository, String token, final ApiCallback<UsersRolesInfoPackage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectUsersAndRolesUsingGETValidateBeforeCall(model, repository, token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UsersRolesInfoPackage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linkFileToFileUsingPUT
     * @param file1 file1 (required)
     * @param file2 file2 (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linkFileToFileUsingPUTCall(Long file1, Long file2, String model, String repository, String token, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/file_link/{repository}/{model}/{type}/{file1}/{file2}/{token}"
            .replaceAll("\\{" + "file1" + "\\}", apiClient.escapeString(file1.toString()))
            .replaceAll("\\{" + "file2" + "\\}", apiClient.escapeString(file2.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linkFileToFileUsingPUTValidateBeforeCall(Long file1, Long file2, String model, String repository, String token, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file1' is set
        if (file1 == null) {
            throw new ApiException("Missing the required parameter 'file1' when calling linkFileToFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'file2' is set
        if (file2 == null) {
            throw new ApiException("Missing the required parameter 'file2' when calling linkFileToFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling linkFileToFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling linkFileToFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling linkFileToFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling linkFileToFileUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = linkFileToFileUsingPUTCall(file1, file2, model, repository, token, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * linkFileToFile
     * 
     * @param file1 file1 (required)
     * @param file2 file2 (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @return StatusOfAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusOfAction linkFileToFileUsingPUT(Long file1, Long file2, String model, String repository, String token, String type) throws ApiException {
        ApiResponse<StatusOfAction> resp = linkFileToFileUsingPUTWithHttpInfo(file1, file2, model, repository, token, type);
        return resp.getData();
    }

    /**
     * linkFileToFile
     * 
     * @param file1 file1 (required)
     * @param file2 file2 (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @return ApiResponse&lt;StatusOfAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusOfAction> linkFileToFileUsingPUTWithHttpInfo(Long file1, Long file2, String model, String repository, String token, String type) throws ApiException {
        com.squareup.okhttp.Call call = linkFileToFileUsingPUTValidateBeforeCall(file1, file2, model, repository, token, type, null, null);
        Type localVarReturnType = new TypeToken<StatusOfAction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * linkFileToFile (asynchronously)
     * 
     * @param file1 file1 (required)
     * @param file2 file2 (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linkFileToFileUsingPUTAsync(Long file1, Long file2, String model, String repository, String token, String type, final ApiCallback<StatusOfAction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linkFileToFileUsingPUTValidateBeforeCall(file1, file2, model, repository, token, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusOfAction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pasteFileUsingPUT
     * @param file file (required)
     * @param model model (required)
     * @param move move (required)
     * @param node node (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pasteFileUsingPUTCall(Long file, String model, Boolean move, Long node, String repository, String token, String type, Long actTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/link/{repository}/{model}/{type}/{node}/{file}/{token}"
            .replaceAll("\\{" + "file" + "\\}", apiClient.escapeString(file.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("act_timestamp", actTimestamp));
        if (move != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("move", move));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pasteFileUsingPUTValidateBeforeCall(Long file, String model, Boolean move, Long node, String repository, String token, String type, Long actTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling pasteFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling pasteFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'move' is set
        if (move == null) {
            throw new ApiException("Missing the required parameter 'move' when calling pasteFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling pasteFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling pasteFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling pasteFileUsingPUT(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling pasteFileUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = pasteFileUsingPUTCall(file, model, move, node, repository, token, type, actTimestamp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * pasteFile
     * 
     * @param file file (required)
     * @param model model (required)
     * @param move move (required)
     * @param node node (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @return DataFileInfoWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataFileInfoWrapper pasteFileUsingPUT(Long file, String model, Boolean move, Long node, String repository, String token, String type, Long actTimestamp) throws ApiException {
        ApiResponse<DataFileInfoWrapper> resp = pasteFileUsingPUTWithHttpInfo(file, model, move, node, repository, token, type, actTimestamp);
        return resp.getData();
    }

    /**
     * pasteFile
     * 
     * @param file file (required)
     * @param model model (required)
     * @param move move (required)
     * @param node node (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @return ApiResponse&lt;DataFileInfoWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataFileInfoWrapper> pasteFileUsingPUTWithHttpInfo(Long file, String model, Boolean move, Long node, String repository, String token, String type, Long actTimestamp) throws ApiException {
        com.squareup.okhttp.Call call = pasteFileUsingPUTValidateBeforeCall(file, model, move, node, repository, token, type, actTimestamp, null, null);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * pasteFile (asynchronously)
     * 
     * @param file file (required)
     * @param model model (required)
     * @param move move (required)
     * @param node node (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pasteFileUsingPUTAsync(Long file, String model, Boolean move, Long node, String repository, String token, String type, Long actTimestamp, final ApiCallback<DataFileInfoWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pasteFileUsingPUTValidateBeforeCall(file, model, move, node, repository, token, type, actTimestamp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchDocumentsUsingGET
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param descipline descipline (optional)
     * @param descr descr (optional)
     * @param docStatus docStatus (optional)
     * @param docType docType (optional)
     * @param editor editor (optional)
     * @param nodeID nodeID (optional, default to 0)
     * @param nodeVer nodeVer (optional)
     * @param pPhase pPhase (optional)
     * @param responsible responsible (optional)
     * @param title title (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchDocumentsUsingGETCall(String model, String repository, String token, String type, String descipline, String descr, String docStatus, String docType, String editor, Long nodeID, String nodeVer, String pPhase, String responsible, String title, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/search/{repository}/{model}/{type}/{token}"
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (descipline != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("descipline", descipline));
        if (descr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("descr", descr));
        if (docStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("docStatus", docStatus));
        if (docType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("docType", docType));
        if (editor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("editor", editor));
        if (nodeID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodeID", nodeID));
        if (nodeVer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodeVer", nodeVer));
        if (pPhase != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pPhase", pPhase));
        if (responsible != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("responsible", responsible));
        if (title != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("title", title));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchDocumentsUsingGETValidateBeforeCall(String model, String repository, String token, String type, String descipline, String descr, String docStatus, String docType, String editor, Long nodeID, String nodeVer, String pPhase, String responsible, String title, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling searchDocumentsUsingGET(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling searchDocumentsUsingGET(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling searchDocumentsUsingGET(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling searchDocumentsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = searchDocumentsUsingGETCall(model, repository, token, type, descipline, descr, docStatus, docType, editor, nodeID, nodeVer, pPhase, responsible, title, progressListener, progressRequestListener);
        return call;

    }

    /**
     * searchDocuments
     * 
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param descipline descipline (optional)
     * @param descr descr (optional)
     * @param docStatus docStatus (optional)
     * @param docType docType (optional)
     * @param editor editor (optional)
     * @param nodeID nodeID (optional, default to 0)
     * @param nodeVer nodeVer (optional)
     * @param pPhase pPhase (optional)
     * @param responsible responsible (optional)
     * @param title title (optional)
     * @return List&lt;DataFileSearchResultInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DataFileSearchResultInfo> searchDocumentsUsingGET(String model, String repository, String token, String type, String descipline, String descr, String docStatus, String docType, String editor, Long nodeID, String nodeVer, String pPhase, String responsible, String title) throws ApiException {
        ApiResponse<List<DataFileSearchResultInfo>> resp = searchDocumentsUsingGETWithHttpInfo(model, repository, token, type, descipline, descr, docStatus, docType, editor, nodeID, nodeVer, pPhase, responsible, title);
        return resp.getData();
    }

    /**
     * searchDocuments
     * 
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param descipline descipline (optional)
     * @param descr descr (optional)
     * @param docStatus docStatus (optional)
     * @param docType docType (optional)
     * @param editor editor (optional)
     * @param nodeID nodeID (optional, default to 0)
     * @param nodeVer nodeVer (optional)
     * @param pPhase pPhase (optional)
     * @param responsible responsible (optional)
     * @param title title (optional)
     * @return ApiResponse&lt;List&lt;DataFileSearchResultInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DataFileSearchResultInfo>> searchDocumentsUsingGETWithHttpInfo(String model, String repository, String token, String type, String descipline, String descr, String docStatus, String docType, String editor, Long nodeID, String nodeVer, String pPhase, String responsible, String title) throws ApiException {
        com.squareup.okhttp.Call call = searchDocumentsUsingGETValidateBeforeCall(model, repository, token, type, descipline, descr, docStatus, docType, editor, nodeID, nodeVer, pPhase, responsible, title, null, null);
        Type localVarReturnType = new TypeToken<List<DataFileSearchResultInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * searchDocuments (asynchronously)
     * 
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param descipline descipline (optional)
     * @param descr descr (optional)
     * @param docStatus docStatus (optional)
     * @param docType docType (optional)
     * @param editor editor (optional)
     * @param nodeID nodeID (optional, default to 0)
     * @param nodeVer nodeVer (optional)
     * @param pPhase pPhase (optional)
     * @param responsible responsible (optional)
     * @param title title (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchDocumentsUsingGETAsync(String model, String repository, String token, String type, String descipline, String descr, String docStatus, String docType, String editor, Long nodeID, String nodeVer, String pPhase, String responsible, String title, final ApiCallback<List<DataFileSearchResultInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchDocumentsUsingGETValidateBeforeCall(model, repository, token, type, descipline, descr, docStatus, docType, editor, nodeID, nodeVer, pPhase, responsible, title, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DataFileSearchResultInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setReadOnlyDocUsingPUT
     * @param doc doc (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param readOnly read_only (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setReadOnlyDocUsingPUTCall(Long doc, String model, String repository, String token, Boolean readOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/acc/{repository}/{model}/{doc}/{token}"
            .replaceAll("\\{" + "doc" + "\\}", apiClient.escapeString(doc.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (readOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("read_only", readOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setReadOnlyDocUsingPUTValidateBeforeCall(Long doc, String model, String repository, String token, Boolean readOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'doc' is set
        if (doc == null) {
            throw new ApiException("Missing the required parameter 'doc' when calling setReadOnlyDocUsingPUT(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling setReadOnlyDocUsingPUT(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling setReadOnlyDocUsingPUT(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setReadOnlyDocUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = setReadOnlyDocUsingPUTCall(doc, model, repository, token, readOnly, progressListener, progressRequestListener);
        return call;

    }

    /**
     * setReadOnlyDoc
     * 
     * @param doc doc (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param readOnly read_only (optional, default to true)
     * @return StatusOfAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusOfAction setReadOnlyDocUsingPUT(Long doc, String model, String repository, String token, Boolean readOnly) throws ApiException {
        ApiResponse<StatusOfAction> resp = setReadOnlyDocUsingPUTWithHttpInfo(doc, model, repository, token, readOnly);
        return resp.getData();
    }

    /**
     * setReadOnlyDoc
     * 
     * @param doc doc (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param readOnly read_only (optional, default to true)
     * @return ApiResponse&lt;StatusOfAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusOfAction> setReadOnlyDocUsingPUTWithHttpInfo(Long doc, String model, String repository, String token, Boolean readOnly) throws ApiException {
        com.squareup.okhttp.Call call = setReadOnlyDocUsingPUTValidateBeforeCall(doc, model, repository, token, readOnly, null, null);
        Type localVarReturnType = new TypeToken<StatusOfAction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * setReadOnlyDoc (asynchronously)
     * 
     * @param doc doc (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param readOnly read_only (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setReadOnlyDocUsingPUTAsync(Long doc, String model, String repository, String token, Boolean readOnly, final ApiCallback<StatusOfAction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setReadOnlyDocUsingPUTValidateBeforeCall(doc, model, repository, token, readOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusOfAction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for undoCheckoutFileUsingDELETE
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call undoCheckoutFileUsingDELETECall(Long file, String model, String repository, String token, String type, Long actTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/file_checkout/{repository}/{model}/{type}/{file}/{token}"
            .replaceAll("\\{" + "file" + "\\}", apiClient.escapeString(file.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("act_timestamp", actTimestamp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call undoCheckoutFileUsingDELETEValidateBeforeCall(Long file, String model, String repository, String token, String type, Long actTimestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling undoCheckoutFileUsingDELETE(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling undoCheckoutFileUsingDELETE(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling undoCheckoutFileUsingDELETE(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling undoCheckoutFileUsingDELETE(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling undoCheckoutFileUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = undoCheckoutFileUsingDELETECall(file, model, repository, token, type, actTimestamp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * undoCheckoutFile
     * 
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @return DataFileInfoWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataFileInfoWrapper undoCheckoutFileUsingDELETE(Long file, String model, String repository, String token, String type, Long actTimestamp) throws ApiException {
        ApiResponse<DataFileInfoWrapper> resp = undoCheckoutFileUsingDELETEWithHttpInfo(file, model, repository, token, type, actTimestamp);
        return resp.getData();
    }

    /**
     * undoCheckoutFile
     * 
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @return ApiResponse&lt;DataFileInfoWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataFileInfoWrapper> undoCheckoutFileUsingDELETEWithHttpInfo(Long file, String model, String repository, String token, String type, Long actTimestamp) throws ApiException {
        com.squareup.okhttp.Call call = undoCheckoutFileUsingDELETEValidateBeforeCall(file, model, repository, token, type, actTimestamp, null, null);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * undoCheckoutFile (asynchronously)
     * 
     * @param file file (required)
     * @param model model (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param actTimestamp act_timestamp (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call undoCheckoutFileUsingDELETEAsync(Long file, String model, String repository, String token, String type, Long actTimestamp, final ApiCallback<DataFileInfoWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = undoCheckoutFileUsingDELETEValidateBeforeCall(file, model, repository, token, type, actTimestamp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClassUsingPOST
     * @param doc doc (required)
     * @param model model (required)
     * @param name name (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param val val (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClassUsingPOSTCall(Long doc, String model, String name, String repository, String token, String type, String val, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/class/{repository}/{model}/{type}/{doc}/{token}"
            .replaceAll("\\{" + "doc" + "\\}", apiClient.escapeString(doc.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (val != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("val", val));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClassUsingPOSTValidateBeforeCall(Long doc, String model, String name, String repository, String token, String type, String val, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'doc' is set
        if (doc == null) {
            throw new ApiException("Missing the required parameter 'doc' when calling updateClassUsingPOST(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling updateClassUsingPOST(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateClassUsingPOST(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling updateClassUsingPOST(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateClassUsingPOST(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateClassUsingPOST(Async)");
        }
        
        // verify the required parameter 'val' is set
        if (val == null) {
            throw new ApiException("Missing the required parameter 'val' when calling updateClassUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClassUsingPOSTCall(doc, model, name, repository, token, type, val, progressListener, progressRequestListener);
        return call;

    }

    /**
     * updateClass
     * 
     * @param doc doc (required)
     * @param model model (required)
     * @param name name (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param val val (required)
     * @return DataFileInfoWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataFileInfoWrapper updateClassUsingPOST(Long doc, String model, String name, String repository, String token, String type, String val) throws ApiException {
        ApiResponse<DataFileInfoWrapper> resp = updateClassUsingPOSTWithHttpInfo(doc, model, name, repository, token, type, val);
        return resp.getData();
    }

    /**
     * updateClass
     * 
     * @param doc doc (required)
     * @param model model (required)
     * @param name name (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param val val (required)
     * @return ApiResponse&lt;DataFileInfoWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataFileInfoWrapper> updateClassUsingPOSTWithHttpInfo(Long doc, String model, String name, String repository, String token, String type, String val) throws ApiException {
        com.squareup.okhttp.Call call = updateClassUsingPOSTValidateBeforeCall(doc, model, name, repository, token, type, val, null, null);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateClass (asynchronously)
     * 
     * @param doc doc (required)
     * @param model model (required)
     * @param name name (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param val val (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClassUsingPOSTAsync(Long doc, String model, String name, String repository, String token, String type, String val, final ApiCallback<DataFileInfoWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClassUsingPOSTValidateBeforeCall(doc, model, name, repository, token, type, val, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePropUsingPOST1
     * @param doc doc (required)
     * @param model model (required)
     * @param props props (required)
     * @param ptypes ptypes (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param units units (required)
     * @param vals vals (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePropUsingPOST1Call(Long doc, String model, List<String> props, List<String> ptypes, String repository, String token, String type, List<String> units, List<String> vals, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dat/prop/{repository}/{model}/{type}/{doc}/{token}"
            .replaceAll("\\{" + "doc" + "\\}", apiClient.escapeString(doc.toString()))
            .replaceAll("\\{" + "model" + "\\}", apiClient.escapeString(model.toString()))
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (props != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "props", props));
        if (ptypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ptypes", ptypes));
        if (units != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "units", units));
        if (vals != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "vals", vals));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePropUsingPOST1ValidateBeforeCall(Long doc, String model, List<String> props, List<String> ptypes, String repository, String token, String type, List<String> units, List<String> vals, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'doc' is set
        if (doc == null) {
            throw new ApiException("Missing the required parameter 'doc' when calling updatePropUsingPOST1(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling updatePropUsingPOST1(Async)");
        }
        
        // verify the required parameter 'props' is set
        if (props == null) {
            throw new ApiException("Missing the required parameter 'props' when calling updatePropUsingPOST1(Async)");
        }
        
        // verify the required parameter 'ptypes' is set
        if (ptypes == null) {
            throw new ApiException("Missing the required parameter 'ptypes' when calling updatePropUsingPOST1(Async)");
        }
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling updatePropUsingPOST1(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updatePropUsingPOST1(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updatePropUsingPOST1(Async)");
        }
        
        // verify the required parameter 'units' is set
        if (units == null) {
            throw new ApiException("Missing the required parameter 'units' when calling updatePropUsingPOST1(Async)");
        }
        
        // verify the required parameter 'vals' is set
        if (vals == null) {
            throw new ApiException("Missing the required parameter 'vals' when calling updatePropUsingPOST1(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePropUsingPOST1Call(doc, model, props, ptypes, repository, token, type, units, vals, progressListener, progressRequestListener);
        return call;

    }

    /**
     * updateProp
     * 
     * @param doc doc (required)
     * @param model model (required)
     * @param props props (required)
     * @param ptypes ptypes (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param units units (required)
     * @param vals vals (required)
     * @return DataFileInfoWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataFileInfoWrapper updatePropUsingPOST1(Long doc, String model, List<String> props, List<String> ptypes, String repository, String token, String type, List<String> units, List<String> vals) throws ApiException {
        ApiResponse<DataFileInfoWrapper> resp = updatePropUsingPOST1WithHttpInfo(doc, model, props, ptypes, repository, token, type, units, vals);
        return resp.getData();
    }

    /**
     * updateProp
     * 
     * @param doc doc (required)
     * @param model model (required)
     * @param props props (required)
     * @param ptypes ptypes (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param units units (required)
     * @param vals vals (required)
     * @return ApiResponse&lt;DataFileInfoWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataFileInfoWrapper> updatePropUsingPOST1WithHttpInfo(Long doc, String model, List<String> props, List<String> ptypes, String repository, String token, String type, List<String> units, List<String> vals) throws ApiException {
        com.squareup.okhttp.Call call = updatePropUsingPOST1ValidateBeforeCall(doc, model, props, ptypes, repository, token, type, units, vals, null, null);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateProp (asynchronously)
     * 
     * @param doc doc (required)
     * @param model model (required)
     * @param props props (required)
     * @param ptypes ptypes (required)
     * @param repository Repository name (required)
     * @param token Server connection token (required)
     * @param type type (required)
     * @param units units (required)
     * @param vals vals (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePropUsingPOST1Async(Long doc, String model, List<String> props, List<String> ptypes, String repository, String token, String type, List<String> units, List<String> vals, final ApiCallback<DataFileInfoWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePropUsingPOST1ValidateBeforeCall(doc, model, props, ptypes, repository, token, type, units, vals, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataFileInfoWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
